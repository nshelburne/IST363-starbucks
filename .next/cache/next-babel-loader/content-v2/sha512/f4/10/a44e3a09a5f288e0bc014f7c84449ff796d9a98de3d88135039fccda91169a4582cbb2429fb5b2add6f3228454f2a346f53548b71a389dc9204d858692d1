{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/nsnad/Desktop/ist363-nextjs/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/nsnad/Desktop/ist363-nextjs/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar API_URL = process.env.WORDPRESS_API_URL;\n\nfunction fetchAPI(_x) {\n  return _fetchAPI.apply(this, arguments);\n}\n\nfunction _fetchAPI() {\n  _fetchAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query) {\n    var _ref,\n        variables,\n        headers,\n        res,\n        json,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref = _args.length > 1 && _args[1] !== undefined ? _args[1] : {}, variables = _ref.variables;\n            headers = {\n              'Content-Type': 'application/json'\n            };\n            _context.next = 4;\n            return fetch(API_URL, {\n              method: 'POST',\n              headers: headers,\n              body: JSON.stringify({\n                query: query,\n                variables: variables\n              })\n            });\n\n          case 4:\n            res = _context.sent;\n            _context.next = 7;\n            return res.json();\n\n          case 7:\n            json = _context.sent;\n\n            if (!json.errors) {\n              _context.next = 11;\n              break;\n            }\n\n            console.error(json.errors);\n            throw new Error('Failed to fetch API');\n\n          case 11:\n            return _context.abrupt(\"return\", json.data);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchAPI.apply(this, arguments);\n}\n\nexport function getAllMenuItems() {\n  return _getAllMenuItems.apply(this, arguments);\n}\n\nfunction _getAllMenuItems() {\n  _getAllMenuItems = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetchAPI(\"\\n        query MyQuery {\\n            items {\\n                edges {\\n                    node {\\n                        id\\n                        title\\n                        slug\\n                        featuredImage {\\n                            node {\\n                            altText\\n                            mediaDetails {\\n                                height\\n                                width\\n                            }\\n                            sourceUrl\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }      \\n\\t\");\n\n          case 2:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", data === null || data === void 0 ? void 0 : data.items);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getAllMenuItems.apply(this, arguments);\n}\n\nexport function getAllMenuItemSlugs() {\n  return _getAllMenuItemSlugs.apply(this, arguments);\n}\n\nfunction _getAllMenuItemSlugs() {\n  _getAllMenuItemSlugs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return fetchAPI(\"\\n        query MyQuery {\\n            items {\\n                edges {\\n                    node {\\n                        id\\n                        slug\\n                    }\\n                }\\n            }\\n        }      \\n\\t\");\n\n          case 2:\n            data = _context3.sent;\n            return _context3.abrupt(\"return\", data === null || data === void 0 ? void 0 : data.items);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getAllMenuItemSlugs.apply(this, arguments);\n}\n\nexport function getMenuItemBySlug(_x2) {\n  return _getMenuItemBySlug.apply(this, arguments);\n}\n\nfunction _getMenuItemBySlug() {\n  _getMenuItemBySlug = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(id) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return fetchAPI(\"\\n        query MyQuery($id: ID!) {\\n            item(id: $id, idType: SLUG) {\\n            id\\n            title\\n            content\\n            featuredImage {\\n                node {\\n                    altText\\n                    sourceUrl\\n                    mediaDetails {\\n                            height\\n                            width\\n                        }\\n                    }\\n                }\\n            }\\n        }\", {\n              variables: {\n                \"id\": id\n              }\n            });\n\n          case 2:\n            data = _context4.sent;\n            return _context4.abrupt(\"return\", data === null || data === void 0 ? void 0 : data.item);\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getMenuItemBySlug.apply(this, arguments);\n}\n\nexport function getMenuTypesAndMenuItems() {\n  return _getMenuTypesAndMenuItems.apply(this, arguments);\n}\n\nfunction _getMenuTypesAndMenuItems() {\n  _getMenuTypesAndMenuItems = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return fetchAPI(\"\\n    query MyQuery {\\n        menuTypes {\\n          edges {\\n            node {\\n              id\\n              name\\n              items {\\n                edges {\\n                  node {\\n                    id\\n                    title\\n                    slug\\n                    featuredImage {\\n                      node {\\n                        altText\\n                        sourceUrl\\n                        mediaDetails {\\n                          height\\n                          width\\n                        }\\n                      }\\n                    }\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n      \");\n\n          case 2:\n            data = _context5.sent;\n            return _context5.abrupt(\"return\", data === null || data === void 0 ? void 0 : data.menuTypes);\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _getMenuTypesAndMenuItems.apply(this, arguments);\n}\n\nexport function getLocationItems() {\n  return _getLocationItems.apply(this, arguments);\n}\n\nfunction _getLocationItems() {\n  _getLocationItems = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return fetchAPI(\"\\n  query MyQuery {\\n    locations {\\n      edges {\\n        node {\\n          content\\n          slug\\n          title\\n          id\\n          featuredImage {\\n            node {\\n              altText\\n              sourceUrl\\n              mediaDetails {\\n                height\\n                width\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }  \\n  \");\n\n          case 2:\n            data = _context6.sent;\n            return _context6.abrupt(\"return\", data === null || data === void 0 ? void 0 : data.locations);\n\n          case 4:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _getLocationItems.apply(this, arguments);\n}\n\nexport function getLocationItemBySlug(_x3) {\n  return _getLocationItemBySlug.apply(this, arguments);\n}\n\nfunction _getLocationItemBySlug() {\n  _getLocationItemBySlug = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(id) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return fetchAPI(\"\\n  query MyQuery($id: ID!) {\\n    location(id: $id, idType: SLUG) {\\n      id\\n      title\\n      content\\n      featuredImage {\\n        node {\\n          altText\\n          mediaDetails {\\n            height\\n            width\\n          }\\n          sourceUrl\\n        }\\n      }\\n      menuTypes {\\n        edges {\\n          node {\\n            id\\n            name\\n            items {\\n              edges {\\n                node {\\n                  id\\n                  title\\n                  slug\\n                  featuredImage {\\n                    node {\\n                      altText\\n                      sourceUrl\\n                      mediaDetails {\\n                        height\\n                        width\\n                      }\\n                    }\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n      store {\\n        address\\n        staff {\\n          ... on Person {\\n            id\\n            title\\n            featuredImage {\\n              node {\\n                altText\\n                mediaDetails {\\n                  height\\n                  width\\n                }\\n                sourceUrl\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n  \\n  \\n  \", {\n              variables: {\n                \"id\": id\n              }\n            });\n\n          case 2:\n            data = _context7.sent;\n            return _context7.abrupt(\"return\", data === null || data === void 0 ? void 0 : data.location);\n\n          case 4:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _getLocationItemBySlug.apply(this, arguments);\n}\n\nexport function getPeopleList() {\n  return _getPeopleList.apply(this, arguments);\n}\n\nfunction _getPeopleList() {\n  _getPeopleList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.next = 2;\n            return fetchAPI(\"\\n  query MyQuery {\\n    people {\\n      edges {\\n        node {\\n          id\\n          slug\\n          title\\n          featuredImage {\\n            node {\\n              altText\\n              sourceUrl\\n              mediaDetails {\\n                height\\n                width\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }  \\n  \");\n\n          case 2:\n            data = _context8.sent;\n            return _context8.abrupt(\"return\", data === null || data === void 0 ? void 0 : data.people);\n\n          case 4:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _getPeopleList.apply(this, arguments);\n}\n\nexport function getPeopleListBySlug(_x4) {\n  return _getPeopleListBySlug.apply(this, arguments);\n}\n\nfunction _getPeopleListBySlug() {\n  _getPeopleListBySlug = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(id) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.next = 2;\n            return fetchAPI(\"\\n  query MyQuery($id: ID!) {\\n    people(id: $id, idType: SLUG) {\\n      content\\n      id\\n      slug\\n      title\\n      featuredImage {\\n        node {\\n          altText\\n          sourceUrl\\n          mediaDetails {\\n            height\\n            width\\n          }\\n        }\\n      }\\n    }\\n  }\", {\n              variables: {\n                \"id\": id\n              }\n            });\n\n          case 2:\n            data = _context9.sent;\n            return _context9.abrupt(\"return\", data === null || data === void 0 ? void 0 : data.people);\n\n          case 4:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n  return _getPeopleListBySlug.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/nsnad/Desktop/ist363-nextjs/lib/api.js"],"names":["API_URL","process","env","WORDPRESS_API_URL","fetchAPI","query","variables","headers","fetch","method","body","JSON","stringify","res","json","errors","console","error","Error","data","getAllMenuItems","items","getAllMenuItemSlugs","getMenuItemBySlug","id","item","getMenuTypesAndMenuItems","menuTypes","getLocationItems","locations","getLocationItemBySlug","location","getPeopleList","people","getPeopleListBySlug"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA5B;;SAEeC,Q;;;;;uEAAf,iBAAwBC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,2EAA+C,EAA/C,EAAiCC,SAAjC,QAAiCA,SAAjC;AACOC,YAAAA,OADP,GACiB;AAAE,8BAAgB;AAAlB,aADjB;AAAA;AAAA,mBAImBC,KAAK,CAACR,OAAD,EAAU;AAChCS,cAAAA,MAAM,EAAE,MADwB;AAEhCF,cAAAA,OAAO,EAAPA,OAFgC;AAGhCG,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACpBP,gBAAAA,KAAK,EAALA,KADoB;AAEpBC,gBAAAA,SAAS,EAATA;AAFoB,eAAf;AAH0B,aAAV,CAJxB;;AAAA;AAIOO,YAAAA,GAJP;AAAA;AAAA,mBAaoBA,GAAG,CAACC,IAAJ,EAbpB;;AAAA;AAaOA,YAAAA,IAbP;;AAAA,iBAcKA,IAAI,CAACC,MAdV;AAAA;AAAA;AAAA;;AAeEC,YAAAA,OAAO,CAACC,KAAR,CAAcH,IAAI,CAACC,MAAnB;AAfF,kBAgBQ,IAAIG,KAAJ,CAAU,qBAAV,CAhBR;;AAAA;AAAA,6CAkBQJ,IAAI,CAACK,IAlBb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAqBA,gBAAsBC,eAAtB;AAAA;AAAA;;;8EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACahB,QAAQ,2nBADrB;;AAAA;AACAe,YAAAA,IADA;AAAA,8CAwBCA,IAxBD,aAwBCA,IAxBD,uBAwBCA,IAAI,CAAEE,KAxBP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA4BP,gBAAsBC,mBAAtB;AAAA;AAAA;;;kFAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACgBlB,QAAQ,+OADxB;;AAAA;AACGe,YAAAA,IADH;AAAA,8CAaCA,IAbD,aAaCA,IAbD,uBAaCA,IAAI,CAAEE,KAbP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAgBP,gBAAsBE,iBAAtB;AAAA;AAAA;;;gFAAO,kBAAkCC,EAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACgBpB,QAAQ,scAiBnB;AACAE,cAAAA,SAAS,EAAE;AACP,sBAAOkB;AADA;AADX,aAjBmB,CADxB;;AAAA;AACGL,YAAAA,IADH;AAAA,8CAwBCA,IAxBD,aAwBCA,IAxBD,uBAwBCA,IAAI,CAAEM,IAxBP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA2BP,gBAAsBC,wBAAtB;AAAA;AAAA;;;uFAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACgBtB,QAAQ,gsBADxB;;AAAA;AACGe,YAAAA,IADH;AAAA,8CAgCIA,IAhCJ,aAgCIA,IAhCJ,uBAgCIA,IAAI,CAAEQ,SAhCV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAmCP,gBAAsBC,gBAAtB;AAAA;AAAA;;;+EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcxB,QAAQ,wYADtB;;AAAA;AACCe,YAAAA,IADD;AAAA,8CAyBEA,IAzBF,aAyBEA,IAzBF,uBAyBEA,IAAI,CAAEU,SAzBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA4BP,gBAAsBC,qBAAtB;AAAA;AAAA;;;oFAAO,kBAAsCN,EAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcpB,QAAQ,qxCAkExB;AACDE,cAAAA,SAAS,EAAE;AACP,sBAAOkB;AADA;AADV,aAlEwB,CADtB;;AAAA;AACCL,YAAAA,IADD;AAAA,8CAwEEA,IAxEF,aAwEEA,IAxEF,uBAwEEA,IAAI,CAAEY,QAxER;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA2EP,gBAAsBC,aAAtB;AAAA;AAAA;;;4EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACc5B,QAAQ,kXADtB;;AAAA;AACCe,YAAAA,IADD;AAAA,8CAwBEA,IAxBF,aAwBEA,IAxBF,uBAwBEA,IAAI,CAAEc,MAxBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA2BP,gBAAsBC,mBAAtB;AAAA;AAAA;;;kFAAO,kBAAmCV,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcpB,QAAQ,sTAmBzB;AACAE,cAAAA,SAAS,EAAE;AACT,sBAAMkB;AADG;AADX,aAnByB,CADtB;;AAAA;AACCL,YAAAA,IADD;AAAA,8CAyBEA,IAzBF,aAyBEA,IAzBF,uBAyBEA,IAAI,CAAEc,MAzBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["const API_URL = process.env.WORDPRESS_API_URL\r\n\r\nasync function fetchAPI(query, { variables } = {}) {\r\n\tconst headers = { 'Content-Type': 'application/json' }\r\n\r\n\r\n\tconst res = await fetch(API_URL, {\r\n\t\tmethod: 'POST',\r\n\t\theaders,\r\n\t\tbody: JSON.stringify({\r\n\t\t\tquery,\r\n\t\t\tvariables,\r\n\t\t}),\r\n\t})\r\n\r\n\tconst json = await res.json()\r\n\tif (json.errors) {\r\n\t\tconsole.error(json.errors)\r\n\t\tthrow new Error('Failed to fetch API')\r\n\t}\r\n\treturn json.data\r\n}\r\n\r\nexport async function getAllMenuItems() {\r\n\tconst data = await fetchAPI(`\r\n        query MyQuery {\r\n            items {\r\n                edges {\r\n                    node {\r\n                        id\r\n                        title\r\n                        slug\r\n                        featuredImage {\r\n                            node {\r\n                            altText\r\n                            mediaDetails {\r\n                                height\r\n                                width\r\n                            }\r\n                            sourceUrl\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }      \r\n\t`)\r\n\treturn data?.items\r\n\r\n}\r\n\r\nexport async function getAllMenuItemSlugs() {\r\n    const data = await fetchAPI(`\r\n        query MyQuery {\r\n            items {\r\n                edges {\r\n                    node {\r\n                        id\r\n                        slug\r\n                    }\r\n                }\r\n            }\r\n        }      \r\n\t`)\r\n\treturn data?.items\r\n}\r\n\r\nexport async function getMenuItemBySlug (id) {\r\n    const data = await fetchAPI(`\r\n        query MyQuery($id: ID!) {\r\n            item(id: $id, idType: SLUG) {\r\n            id\r\n            title\r\n            content\r\n            featuredImage {\r\n                node {\r\n                    altText\r\n                    sourceUrl\r\n                    mediaDetails {\r\n                            height\r\n                            width\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }`, {\r\n            variables: { \r\n                \"id\" : id,\r\n            }\r\n        }\r\n        )\r\n\treturn data?.item\r\n}\r\n\r\nexport async function getMenuTypesAndMenuItems() {\r\n    const data = await fetchAPI(`\r\n    query MyQuery {\r\n        menuTypes {\r\n          edges {\r\n            node {\r\n              id\r\n              name\r\n              items {\r\n                edges {\r\n                  node {\r\n                    id\r\n                    title\r\n                    slug\r\n                    featuredImage {\r\n                      node {\r\n                        altText\r\n                        sourceUrl\r\n                        mediaDetails {\r\n                          height\r\n                          width\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      `)\r\n    return data?.menuTypes\r\n}\r\n\r\nexport async function getLocationItems(){\r\n  const data = await fetchAPI(`\r\n  query MyQuery {\r\n    locations {\r\n      edges {\r\n        node {\r\n          content\r\n          slug\r\n          title\r\n          id\r\n          featuredImage {\r\n            node {\r\n              altText\r\n              sourceUrl\r\n              mediaDetails {\r\n                height\r\n                width\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }  \r\n  `)\r\n  return data?.locations\r\n}\r\n\r\nexport async function getLocationItemBySlug (id) {\r\n  const data = await fetchAPI(`\r\n  query MyQuery($id: ID!) {\r\n    location(id: $id, idType: SLUG) {\r\n      id\r\n      title\r\n      content\r\n      featuredImage {\r\n        node {\r\n          altText\r\n          mediaDetails {\r\n            height\r\n            width\r\n          }\r\n          sourceUrl\r\n        }\r\n      }\r\n      menuTypes {\r\n        edges {\r\n          node {\r\n            id\r\n            name\r\n            items {\r\n              edges {\r\n                node {\r\n                  id\r\n                  title\r\n                  slug\r\n                  featuredImage {\r\n                    node {\r\n                      altText\r\n                      sourceUrl\r\n                      mediaDetails {\r\n                        height\r\n                        width\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      store {\r\n        address\r\n        staff {\r\n          ... on Person {\r\n            id\r\n            title\r\n            featuredImage {\r\n              node {\r\n                altText\r\n                mediaDetails {\r\n                  height\r\n                  width\r\n                }\r\n                sourceUrl\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  \r\n  `, {\r\n    variables: { \r\n        \"id\" : id,\r\n    }\r\n  })\r\n  return data?.location\r\n}\r\n\r\nexport async function getPeopleList(){\r\n  const data = await fetchAPI(`\r\n  query MyQuery {\r\n    people {\r\n      edges {\r\n        node {\r\n          id\r\n          slug\r\n          title\r\n          featuredImage {\r\n            node {\r\n              altText\r\n              sourceUrl\r\n              mediaDetails {\r\n                height\r\n                width\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }  \r\n  `)\r\n  return data?.people\r\n}\r\n\r\nexport async function getPeopleListBySlug(id) {\r\n  const data = await fetchAPI(`\r\n  query MyQuery($id: ID!) {\r\n    people(id: $id, idType: SLUG) {\r\n      content\r\n      id\r\n      slug\r\n      title\r\n      featuredImage {\r\n        node {\r\n          altText\r\n          sourceUrl\r\n          mediaDetails {\r\n            height\r\n            width\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }`\r\n  , {\r\n    variables: {\r\n      \"id\": id,\r\n    }\r\n  })\r\n  return data?.people;\r\n}"]},"metadata":{},"sourceType":"module"}